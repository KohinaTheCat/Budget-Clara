{"version":3,"sources":["logo.svg","list/List.js","graph/Graph.js","expenses/Expenses.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","useState","Date","parse","when","amount","setAmount","what","setWhat","where","setWhere","essential","setEssential","edit","setEdit","id","onEditChange","cells","TableRow","TableCell","substring","Math","abs","parseFloat","toFixed","align","style","color","green","width","IconButton","onClick","deleteItem","ExampleCustomInput","value","Button","variant","editCells","selected","onChange","date","setWhen","customInput","TextField","label","e","target","Checkbox","checked","newItem","axios","post","then","catch","err","console","log","PI","Graph","loss","this","gain","total","className","xDomain","yDomain","getAngle","d","time","getAngle0","height","colorDomain","colorRange","animation","radiusDomain","data","radius0","radius","Component","Expenses","onEssentialChange","setState","handleChangePage","event","newPage","page","TablePaginationActions","state","bind","addItem","list","count","update","get","res","delete","resetTextFields","slice","map","current","i","key","_id","Card","TableContainer","component","Table","TableHead","name","TableBody","Typography","displayList","TableFooter","TablePagination","rowsPerPageOptions","colSpan","length","rowsPerPage","SelectProps","inputProps","native","onChangePage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.82ae81a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\nimport {\r\n  Checkbox,\r\n  TableRow,\r\n  TableCell,\r\n  TextField,\r\n  IconButton,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport CheckSharpIcon from \"@material-ui/icons/CheckSharp\";\r\nimport EditSharpIcon from \"@material-ui/icons/EditSharp\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport ClearSharpIcon from \"@material-ui/icons/ClearSharp\";\r\nimport DeleteSharpIcon from \"@material-ui/icons/DeleteSharp\";\r\n\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\n\r\n/*\r\n    Display each individual transaction, and check for change.\r\n*/\r\nfunction List(props) {\r\n  // I could make this a stateful component, but I want to play with hooks\r\n\r\n  let [when, setWhen] = useState(Date.parse(props.when));\r\n  let [amount, setAmount] = useState(props.amount);\r\n  let [what, setWhat] = useState(props.what);\r\n  let [where, setWhere] = useState(props.where);\r\n  let [essential, setEssential] = useState(props.essential);\r\n  let [edit, setEdit] = useState(false);\r\n  let id = props.id;\r\n\r\n  let onEditChange = () => {\r\n    setEdit(!edit);\r\n  };\r\n\r\n  let cells = (\r\n    <TableRow id={id}>\r\n      <TableCell>{props.when.substring(0, 10)}</TableCell>\r\n      <TableCell>\r\n        {amount < 0 ? \"-\" : \"\"}${Math.abs(parseFloat(amount).toFixed(2))}\r\n      </TableCell>\r\n      <TableCell>{where}</TableCell>\r\n      <TableCell>{what}</TableCell>\r\n      <TableCell align=\"center\">\r\n        {essential === \"yes\" ? (\r\n          <CheckSharpIcon style={{ color: green[600] }} />\r\n        ) : (\r\n          <ClearSharpIcon color=\"secondary\" />\r\n        )}\r\n      </TableCell>\r\n      <TableCell align=\"center\" style={{ width: \"80px\" }}>\r\n        <IconButton onClick={onEditChange}>\r\n          <EditSharpIcon />\r\n        </IconButton>\r\n        <IconButton onClick={() => props.deleteItem(props.id)}>\r\n          <DeleteSharpIcon />\r\n        </IconButton>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n\r\n  let onEssentialChange = (e) => {\r\n    if (e.target.checked) {\r\n      setEssential(\"yes\");\r\n    } else {\r\n      setEssential(\"no\");\r\n    }\r\n  };\r\n\r\n  let callEdit = () => {\r\n    const newItem = {\r\n      when: new Date(when),\r\n      amount: parseFloat(amount),\r\n      where: where,\r\n      what: what,\r\n      essential: essential,\r\n      id: id,\r\n    };\r\n    axios\r\n      .post(\r\n        \"/transactions/\" + id,\r\n        newItem\r\n      )\r\n      .then(onEditChange())\r\n      //   .then((res) => update())\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const ExampleCustomInput = ({ value, onClick }) => (\r\n    <Button variant=\"contained\" color=\"primary\" onClick={onClick}>\r\n      {value}\r\n    </Button>\r\n  );\r\n\r\n  let editCells = (\r\n    <TableRow id={id}>\r\n      <TableCell>\r\n        <DatePicker\r\n          selected={when}\r\n          onChange={(date) => this.setWhen(date)}\r\n          customInput={<ExampleCustomInput />}\r\n        />\r\n      </TableCell>\r\n\r\n      <TableCell align=\"center\">\r\n        <TextField\r\n          style={{ width: \"66px\" }}\r\n          label={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n        ></TextField>\r\n      </TableCell>\r\n\r\n      <TableCell align=\"center\">\r\n        <TextField\r\n          label={where}\r\n          onChange={(e) => setWhere(e.target.value)}\r\n        ></TextField>\r\n      </TableCell>\r\n\r\n      <TableCell align=\"center\">\r\n        <TextField\r\n          label={what}\r\n          onChange={(e) => setWhat(e.target.value)}\r\n        ></TextField>\r\n      </TableCell>\r\n\r\n      <TableCell align=\"center\">\r\n        <Checkbox\r\n          checked={essential === \"yes\"}\r\n          style={{ color: green[500] }}\r\n          onClick={onEssentialChange}\r\n        ></Checkbox>\r\n      </TableCell>\r\n\r\n      <TableCell align=\"center\">\r\n        <IconButton onClick={callEdit}>\r\n          <ArrowForwardIosIcon />\r\n        </IconButton>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n\r\n  return <>{edit ? editCells : cells}</>;\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\r\nimport \"./graph.css\";\r\nimport { XYPlot, ArcSeries } from \"react-vis\";\r\n\r\nconst PI = Math.PI;\r\n\r\nexport class Graph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const loss = Math.abs(this.props.loss);\r\n    const gain = this.props.gain;\r\n    const total = loss + gain;\r\n\r\n    console.log(loss, gain, total)\r\n    return (\r\n      <div className=\"bg\">\r\n        <XYPlot\r\n          xDomain={[-10, 10]}\r\n          yDomain={[-10, 10]}\r\n          width={500}\r\n          getAngle={(d) => d.time}\r\n          getAngle0={(d) => 0}\r\n          height={500}\r\n          colorDomain={[0,1]}\r\n          colorRange={[\"#cd3b54\", \"#59b953\"]}\r\n        >\r\n          <ArcSeries\r\n            animation\r\n            radiusDomain={[0, 3]}\r\n            data={[\r\n              {\r\n                time: (loss / total) * 2 * PI,\r\n                radius0: 1,\r\n                radius: 1.5,\r\n                color: 0,\r\n              },\r\n              {\r\n                time: (gain / total) * 2* PI,\r\n                radius0: 1.6,\r\n                radius: 2.1,\r\n                color: 1,\r\n              },\r\n            ]}\r\n          />\r\n        </XYPlot>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Card,\r\n  Typography,\r\n  Checkbox,\r\n  IconButton,\r\n  TableCell,\r\n  TableBody,\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Button,\r\n  TableFooter,\r\n  TablePagination,\r\n} from \"@material-ui/core\";\r\nimport AddCircleSharpIcon from \"@material-ui/icons/AddCircleSharp\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from \"axios\";\r\nimport List from \"../list/List\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport \"./expenses.css\";\r\nimport Graph from \"../graph/Graph\";\r\n\r\n/*\r\n    Getting data from database and displaying it in a table.\r\n*/\r\nexport class Expenses extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.addItem = this.addItem.bind(this);\r\n\r\n    //REPLACE WITH REDUX\r\n    this.state = {\r\n      list: [],\r\n      amount: \"\",\r\n      where: \"\",\r\n      what: \"\",\r\n      when: new Date(),\r\n      essential: \"no\",\r\n      total: 0,\r\n      gain: 0,\r\n      loss: 0,\r\n      page: 0,\r\n      count: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n    axios\r\n      .get(\"/transactions\")\r\n      .then((res) => {\r\n        this.setState({ list: res.data });\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n    //call to get total amount from db\r\n    axios\r\n      .get(\"/transactions/total\")\r\n      .then((res) => {\r\n        this.setState({ total: res.data[0].total, gain: res.data[0].gain, loss: res.data[0].loss });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  deleteItem(id) {\r\n    axios\r\n      .delete(\"/transactions/\" + id)\r\n      .then((res) => this.update());\r\n  }\r\n\r\n  resetTextFields() {\r\n    this.setState({\r\n      amount: \"\",\r\n      where: \"\",\r\n      what: \"\",\r\n    });\r\n  }\r\n\r\n  addItem() {\r\n    const newItem = {\r\n      when: this.state.when,\r\n      amount: parseFloat(this.state.amount),\r\n      where: this.state.where,\r\n      what: this.state.what,\r\n      essential: this.state.essential,\r\n    };\r\n\r\n    axios\r\n      .post(\"/transactions/\", newItem)\r\n      .then(this.resetTextFields())\r\n      .then((res) => this.update());\r\n  }\r\n\r\n  displayList() {\r\n    return this.state.list\r\n      .slice(this.state.page * 5, this.state.page * 5 + 5)\r\n      .map((current, i) => {\r\n        return (\r\n          <List\r\n            key={current._id}\r\n            amount={current.amount}\r\n            where={current.where}\r\n            essential={current.essential}\r\n            what={current.what}\r\n            when={current.when}\r\n            id={current._id}\r\n            deleteItem={this.deleteItem}\r\n          />\r\n        );\r\n      });\r\n  }\r\n\r\n  onEssentialChange = (e) => {\r\n    if (e.target.checked) {\r\n      this.setState({ essential: \"no\" });\r\n    } else {\r\n      this.setState({ essential: \"yes\" });\r\n    }\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({ page: newPage });\r\n  };\r\n\r\n  TablePaginationActions = () => {\r\n    this.setState({ page: this.state.page + 1 });\r\n  };\r\n\r\n  render() {\r\n    //    EDIT: DEF. PUT THIS INTO A REUSABLE COMPONENT.\r\n    const ExampleCustomInput = ({ value, onClick }) => (\r\n      <Button variant=\"contained\" color=\"primary\" onClick={onClick}>\r\n        {value}\r\n      </Button>\r\n    );\r\n\r\n    return (\r\n      <Card className=\"background\">\r\n        <Card className=\"container\">\r\n          <TableContainer component={Card}>\r\n            <Table>\r\n              {/* top labels */}\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Date</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>Amount</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>Place</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>Description</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>Essential</b>\r\n                  </TableCell>\r\n                  <TableCell />\r\n                </TableRow>\r\n              </TableHead>\r\n              {/* add additional transaction */}\r\n              {/* EDIT: SEE IF THIS CAN BE REDUCED TO A COMPONENT */}\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <DatePicker\r\n                      selected={this.state.when}\r\n                      onChange={(date) => this.setState({ when: date })}\r\n                      customInput={<ExampleCustomInput />}\r\n                    />\r\n                  </TableCell>\r\n                  {[\"amount\", \"where\", \"what\"].map((name) => (\r\n                    <TableCell key={name + \"1\"} align=\"center\">\r\n                      <TextField\r\n                        key={name + \"2\"}\r\n                        id=\"outlined-basic\"\r\n                        variant=\"outlined\"\r\n                        value={this.state[name]}\r\n                        onChange={(e) =>\r\n                          this.setState({ [name]: e.target.value })\r\n                        }\r\n                      ></TextField>\r\n                    </TableCell>\r\n                  ))}\r\n                  <TableCell align=\"center\">\r\n                    <Checkbox\r\n                      style={{ color: green[500] }}\r\n                      onChange={this.onEssentialChange}\r\n                    ></Checkbox>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <IconButton onClick={this.addItem}>\r\n                      <AddCircleSharpIcon color=\"primary\"></AddCircleSharpIcon>\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              {/* total from db */}\r\n              <TableBody>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                      Total: {this.state.total < 0 ? \"-\" : \"\"}$\r\n                      {Math.abs(this.state.total.toFixed(2))}\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n                {/* display all transactions */}\r\n                {this.displayList()}\r\n              </TableBody>\r\n              {/* page control */}\r\n              <TableFooter>\r\n                <TableRow>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5]}\r\n                    colSpan={6}\r\n                    count={this.state.list.length} //total amount of transactions\r\n                    rowsPerPage={5}\r\n                    page={this.state.page} //page you are on\r\n                    SelectProps={{\r\n                      inputProps: { \"aria-label\": \"rows per page\" },\r\n                      native: true,\r\n                    }}\r\n                    onChangePage={this.handleChangePage}\r\n                    // ActionsComponent={this.TablePaginationActions}\r\n                  />\r\n                </TableRow>\r\n              </TableFooter>\r\n            </Table>\r\n          </TableContainer>\r\n        </Card>\r\n\r\n        <Graph total={this.state.total} gain={this.state.gain} loss={this.state.loss}></Graph>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Expenses;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Expenses from './expenses/Expenses'\n\n\nfunction App() {\n  return (\n    <Expenses/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//REACT REDUX TO BE ADDED\nimport {createStore} from \"redux\";\n// import rootReducer from \"./redux/reducer\"\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n    //from html file\n  );\n\nserviceWorker.unregister();"],"sourceRoot":""}